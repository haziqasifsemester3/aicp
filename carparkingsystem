#include <iostream>
#include <map>
using namespace std;

struct ParkingRate {
    int maxHours;
    double dayRate;
    double nightRate;
};

map<string, ParkingRate> initializeRates() {
    map<string, ParkingRate> rates;
    rates["Sunday"] = {8, 2.0, 2.0};
    rates["Monday"] = {2, 10.0, 2.0};
    rates["Tuesday"] = {2, 10.0, 2.0};
    rates["Wednesday"] = {2, 10.0, 2.0};
    rates["Thursday"] = {2, 10.0, 2.0};
    rates["Friday"] = {2, 10.0, 2.0};
    rates["Saturday"] = {4, 3.0, 2.0};
    return rates;
}

map<string, ParkingRate> rates = initializeRates();


bool isFrequentParkingNumberValid(int frequentParkingNumber) {
    int weights[] = {5, 4, 3, 2};  // weights for the 4 digits
    int sum = 0;

    // Calculate the sum of the first 4 digits multiplied by their weights
    for (int i = 0; i < 4; i++) {
        int digit = frequentParkingNumber / 10000;  // get the first digit
        sum += weights[i] * digit;
        frequentParkingNumber %= 10000;  // remove the first digit
        frequentParkingNumber *= 10;  // shift the number to the left
    }

    // The last digit is the check digit
    int checkDigit = frequentParkingNumber;

    // Calculate the MOD11 check digit
    int remainder = sum % 11;
    int mod11CheckDigit = (remainder == 0 || remainder == 1) ? 0 : 11 - remainder;

    // The frequent parking number is valid if the check digit equals the MOD11 check digit
    return checkDigit == mod11CheckDigit;
}


double calculatePrice(string day, int arrivalHour, int hours, int frequentParkingNumber) {
    // Check if the arrivalHour is between midnight and 8 am
    if (arrivalHour >= 0 && arrivalHour < 8) {
        cout << "Error: No parking is allowed between Midnight and 8 am.\n";
        exit(0); // Terminate the program
    }

    ParkingRate rate = rates[day];
    double price = 0.0;

    if (arrivalHour >= 8 && arrivalHour < 16) {
        price = rate.dayRate * hours;
    } else {
        price = rate.nightRate * hours;
    }

    if (isFrequentParkingNumberValid(frequentParkingNumber)) {
        if (arrivalHour >= 16) {
            price *= 0.5;  // 50% discount
        } else {
            price *= 0.9;  // 10% discount
        }
    }

    return price;
}

double calculateFairPrice(string day, int arrivalHour, int hours, int frequentParkingNumber) {
    // Check if the arrivalHour is between midnight and 8 am
    if (arrivalHour >= 0 && arrivalHour < 8) {
        cout << "Error: No parking is allowed between Midnight and 8 am.\n";
        exit(0); // Terminate the program
    }

    ParkingRate rate = rates[day];
    double price = 0.0;

    if (arrivalHour < 16 && arrivalHour + hours > 16) {
        int dayHours = 16 - arrivalHour;
        int nightHours = hours - dayHours;

        price = rate.dayRate * dayHours + rate.nightRate * nightHours;
    } else {
        price = calculatePrice(day, arrivalHour, hours, frequentParkingNumber);
    }

    return price;
}


int main() {
    double dailyTotal = 0.0;
    string day;
    int arrivalHour;
    int hours;
    int frequentParkingNumber;

    cout << "Enter the day: ";
    cin >> day;

    cout << "Enter the hour of arrival: ";
    cin >> arrivalHour;

    cout << "Enter the number of hours to park: ";
    cin >> hours;

    cout << "Enter the frequent parking number (or 0 if not available): ";
    cin >> frequentParkingNumber;

    double price = calculateFairPrice(day, arrivalHour, hours, frequentParkingNumber);

    double amountPaid;
    cout << "The amount to be paid is: " << price << endl;
    cout << "Please enter the amount paid: ";
    cin >> amountPaid;

    if (amountPaid >= price) {
        dailyTotal += amountPaid;
    } else {
        cout << "Error: The amount paid must be greater than or equal to the price." << endl;
    }

    cout << "The daily total is: " << dailyTotal << endl;

    return 0;
}

/* References: 
https://www.codevscolor.com/c-plus-plus-calculate-discounted-price#google_vignette
 */
